{"ast":null,"code":"import _regeneratorRuntime from \"/home/dev/Cloudtek/fullStackProj/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/dev/Cloudtek/fullStackProj/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/dev/Cloudtek/fullStackProj/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dev/Cloudtek/fullStackProj/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar GET = 'GET';\nvar POST = 'POST';\nvar PUT = 'PUT';\nvar DELETE = 'DELETE';\nexport var Api =\n/*#__PURE__*/\nfunction () {\n  function Api() {\n    _classCallCheck(this, Api);\n  }\n\n  _createClass(Api, [{\n    key: \"_login\",\n    value: function () {\n      var _login2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var _this = this;\n\n        var email, password, form;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                email = _ref.email, password = _ref.password;\n                console.log(email, password);\n                form = new FormData();\n                form.append(\"email\", email);\n                form.append(\"password\", password);\n                return _context.abrupt(\"return\", fetch(\"/api/sessions\", this.getOptions({\n                  method: POST,\n                  data: form,\n                  contentType: null\n                })).then(function (res) {\n                  return res.json();\n                }).then(function (_ref2) {\n                  var token = _ref2.token;\n                  return _this.token = token;\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _login(_x) {\n        return _login2.apply(this, arguments);\n      }\n\n      return _login;\n    }()\n  }, {\n    key: \"_signup\",\n    value: function () {\n      var _signup2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref3) {\n        var _this2 = this;\n\n        var email, password, selectedRole, form;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                email = _ref3.email, password = _ref3.password, selectedRole = _ref3.selectedRole;\n                form = new FormData();\n                form.append(\"email\", email);\n                form.append(\"password\", password);\n                form.append(\"selectedRole\", selectedRole.value);\n                return _context2.abrupt(\"return\", fetch(\"/api/sessions\", this.getOptions({\n                  method: POST,\n                  data: form,\n                  contentType: null\n                })).then(function (res) {\n                  return res.json();\n                }).then(function (_ref4) {\n                  var token = _ref4.token;\n                  return _this2.token = token;\n                }));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _signup(_x2) {\n        return _signup2.apply(this, arguments);\n      }\n\n      return _signup;\n    }()\n  }, {\n    key: \"token\",\n    get: function get() {\n      return this._token;\n    },\n    set: function set(value) {\n      this._token = value;\n    }\n  }]);\n\n  return Api;\n}();","map":{"version":3,"sources":["/home/dev/Cloudtek/fullStackProj/front-end/src/api/api.js"],"names":["GET","POST","PUT","DELETE","Api","email","password","console","log","form","FormData","append","fetch","getOptions","method","data","contentType","then","res","json","token","selectedRole","value","_token"],"mappings":";;;;AAAA,IAAMA,GAAG,GAAG,KAAZ;AACA,IAAMC,IAAI,GAAG,MAAb;AACA,IAAMC,GAAG,GAAG,KAAZ;AACA,IAAMC,MAAM,GAAG,QAAf;AAEA,WAAaC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmBC,gBAAAA,KAFnB,QAEmBA,KAFnB,EAE0BC,QAF1B,QAE0BA,QAF1B;AAGQC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,QAAnB;AACIG,gBAAAA,IAJZ,GAImB,IAAIC,QAAJ,EAJnB;AAKQD,gBAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqBN,KAArB;AACAI,gBAAAA,IAAI,CAACE,MAAL,CAAY,UAAZ,EAAwBL,QAAxB;AANR,iDAQeM,KAAK,kBAAkB,KAAKC,UAAL,CAAgB;AAAEC,kBAAAA,MAAM,EAAEb,IAAV;AAAgBc,kBAAAA,IAAI,EAAEN,IAAtB;AAA4BO,kBAAAA,WAAW,EAAE;AAAzC,iBAAhB,CAAlB,CAAL,CACFC,IADE,CACG,UAAAC,GAAG;AAAA,yBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,iBADN,EAEFF,IAFE,CAEG;AAAA,sBAAGG,KAAH,SAAGA,KAAH;AAAA,yBAAe,KAAI,CAACA,KAAL,GAAaA,KAA5B;AAAA,iBAFH,CARf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAaoBf,gBAAAA,KAbpB,SAaoBA,KAbpB,EAa2BC,QAb3B,SAa2BA,QAb3B,EAaqCe,YAbrC,SAaqCA,YAbrC;AAcYZ,gBAAAA,IAdZ,GAcmB,IAAIC,QAAJ,EAdnB;AAeQD,gBAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqBN,KAArB;AACAI,gBAAAA,IAAI,CAACE,MAAL,CAAY,UAAZ,EAAwBL,QAAxB;AACAG,gBAAAA,IAAI,CAACE,MAAL,CAAY,cAAZ,EAA4BU,YAAY,CAACC,KAAzC;AAjBR,kDAoBeV,KAAK,kBAAkB,KAAKC,UAAL,CAAgB;AAAEC,kBAAAA,MAAM,EAAEb,IAAV;AAAgBc,kBAAAA,IAAI,EAAEN,IAAtB;AAA4BO,kBAAAA,WAAW,EAAE;AAAzC,iBAAhB,CAAlB,CAAL,CACFC,IADE,CACG,UAAAC,GAAG;AAAA,yBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,iBADN,EAEFF,IAFE,CAEG;AAAA,sBAAGG,KAAH,SAAGA,KAAH;AAAA,yBAAe,MAAI,CAACA,KAAL,GAAaA,KAA5B;AAAA,iBAFH,CApBf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAyBgB;AACR,aAAO,KAAKG,MAAZ;AACH,KA3BL;AAAA,sBA6BcD,KA7Bd,EA6BqB;AACb,WAAKC,MAAL,GAAcD,KAAd;AACH;AA/BL;;AAAA;AAAA","sourcesContent":["const GET = 'GET'\nconst POST = 'POST'\nconst PUT = 'PUT'\nconst DELETE = 'DELETE'\n\nexport class Api {\n\n    async _login({ email, password }) {\n        console.log(email, password)\n        let form = new FormData();\n        form.append(\"email\", email);\n        form.append(\"password\", password);\n\n        return fetch(`/api/sessions`, this.getOptions({ method: POST, data: form, contentType: null }))\n            .then(res => res.json())\n            .then(({ token }) => this.token = token)\n    }\n\n    async _signup({ email, password, selectedRole }) {\n        let form = new FormData();\n        form.append(\"email\", email);\n        form.append(\"password\", password);\n        form.append(\"selectedRole\", selectedRole.value);\n\n\n        return fetch(`/api/sessions`, this.getOptions({ method: POST, data: form, contentType: null }))\n            .then(res => res.json())\n            .then(({ token }) => this.token = token)\n    }\n\n    get token() {\n        return this._token\n    }\n\n    set token(value) {\n        this._token = value\n    }\n}\n"]},"metadata":{},"sourceType":"module"}