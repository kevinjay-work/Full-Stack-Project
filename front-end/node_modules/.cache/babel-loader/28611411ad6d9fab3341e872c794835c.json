{"ast":null,"code":"import _regeneratorRuntime from \"/home/dev/Cloudtek/fullStackProj/front-end/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/dev/Cloudtek/fullStackProj/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/dev/Cloudtek/fullStackProj/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dev/Cloudtek/fullStackProj/front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nvar GET = 'GET';\nvar POST = 'POST';\nvar PUT = 'PUT';\nvar DELETE = 'DELETE';\nexport var Api =\n/*#__PURE__*/\nfunction () {\n  function Api() {\n    _classCallCheck(this, Api);\n  }\n\n  _createClass(Api, [{\n    key: \"_login\",\n    value: function () {\n      var _login2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var email, password, form;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                email = _ref.email, password = _ref.password;\n                console.log(email, password);\n                form = new FormData();\n                form.append(\"email\", email);\n                form.append(\"password\", password);\n                return _context.abrupt(\"return\", axios.post('http://localhost:3001/users/login', {\n                  email: \"\".concat(email),\n                  password: \"\".concat(password)\n                }).then(function (response) {\n                  if (response.data.message === false) {\n                    return {\n                      message: 'user not found'\n                    };\n                  } else {\n                    return {\n                      email: email\n                    };\n                  }\n                }).catch(function (error) {\n                  return error;\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function _login(_x) {\n        return _login2.apply(this, arguments);\n      }\n\n      return _login;\n    }()\n  }, {\n    key: \"_signup\",\n    value: function () {\n      var _signup2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref2) {\n        var email, password, selectedRole, form;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                email = _ref2.email, password = _ref2.password, selectedRole = _ref2.selectedRole;\n                form = new FormData();\n                form.append(\"email\", email);\n                form.append(\"password\", password);\n                form.append(\"selectedRole\", selectedRole.value);\n                return _context2.abrupt(\"return\", axios.post('http://localhost:3001/users/signup', {\n                  email: \"\".concat(email),\n                  password: \"\".concat(password),\n                  userRole: \"\".concat(selectedRole)\n                }).then(function (response) {\n                  if (response.data.message === false) {\n                    alert('This User is alraedy registered, try with some other email.');\n                  } else {\n                    alert('Welcome, You have been logged in');\n                  }\n                }).catch(function (error) {\n                  alert(error);\n                }));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function _signup(_x2) {\n        return _signup2.apply(this, arguments);\n      }\n\n      return _signup;\n    }()\n  }, {\n    key: \"token\",\n    get: function get() {\n      return this._token;\n    },\n    set: function set(value) {\n      this._token = value;\n    }\n  }]);\n\n  return Api;\n}();","map":{"version":3,"sources":["/home/dev/Cloudtek/fullStackProj/front-end/src/api/api.js"],"names":["axios","GET","POST","PUT","DELETE","Api","email","password","console","log","form","FormData","append","post","then","response","data","message","catch","error","selectedRole","value","userRole","alert","_token"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAMC,GAAG,GAAG,KAAZ;AACA,IAAMC,IAAI,GAAG,MAAb;AACA,IAAMC,GAAG,GAAG,KAAZ;AACA,IAAMC,MAAM,GAAG,QAAf;AAEA,WAAaC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmBC,gBAAAA,KAFnB,QAEmBA,KAFnB,EAE0BC,QAF1B,QAE0BA,QAF1B;AAGQC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,QAAnB;AACIG,gBAAAA,IAJZ,GAImB,IAAIC,QAAJ,EAJnB;AAKQD,gBAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqBN,KAArB;AACAI,gBAAAA,IAAI,CAACE,MAAL,CAAY,UAAZ,EAAwBL,QAAxB;AANR,iDAQeP,KAAK,CAACa,IAAN,CAAW,mCAAX,EAAgD;AACnDP,kBAAAA,KAAK,YAAKA,KAAL,CAD8C;AAEnDC,kBAAAA,QAAQ,YAAKA,QAAL;AAF2C,iBAAhD,EAIJO,IAJI,CAIC,UAACC,QAAD,EAAc;AAClB,sBAAGA,QAAQ,CAACC,IAAT,CAAcC,OAAd,KAA0B,KAA7B,EAAoC;AAClC,2BAAO;AACLA,sBAAAA,OAAO,EAAG;AADL,qBAAP;AAGD,mBAJD,MAIO;AACL,2BAAO;AACLX,sBAAAA,KAAK,EAALA;AADK,qBAAP;AAGD;AACF,iBAdI,EAeJY,KAfI,CAeE,UAACC,KAAD,EAAW;AAChB,yBAAOA,KAAP;AACD,iBAjBI,CARf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BoBb,gBAAAA,KA5BpB,SA4BoBA,KA5BpB,EA4B2BC,QA5B3B,SA4B2BA,QA5B3B,EA4BqCa,YA5BrC,SA4BqCA,YA5BrC;AA6BYV,gBAAAA,IA7BZ,GA6BmB,IAAIC,QAAJ,EA7BnB;AA8BQD,gBAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqBN,KAArB;AACAI,gBAAAA,IAAI,CAACE,MAAL,CAAY,UAAZ,EAAwBL,QAAxB;AACAG,gBAAAA,IAAI,CAACE,MAAL,CAAY,cAAZ,EAA4BQ,YAAY,CAACC,KAAzC;AAhCR,kDAmCgBrB,KAAK,CAACa,IAAN,CAAW,oCAAX,EAAiD;AACrDP,kBAAAA,KAAK,YAAKA,KAAL,CADgD;AAErDC,kBAAAA,QAAQ,YAAKA,QAAL,CAF6C;AAGrDe,kBAAAA,QAAQ,YAAKF,YAAL;AAH6C,iBAAjD,EAKLN,IALK,CAKA,UAACC,QAAD,EAAc;AAClB,sBAAGA,QAAQ,CAACC,IAAT,CAAcC,OAAd,KAA0B,KAA7B,EAAoC;AAClCM,oBAAAA,KAAK,CAAC,6DAAD,CAAL;AACD,mBAFD,MAEO;AACLA,oBAAAA,KAAK,CAAC,kCAAD,CAAL;AACD;AACF,iBAXK,EAYLL,KAZK,CAYC,UAACC,KAAD,EAAW;AAChBI,kBAAAA,KAAK,CAACJ,KAAD,CAAL;AACD,iBAdK,CAnChB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAoDgB;AACR,aAAO,KAAKK,MAAZ;AACH,KAtDL;AAAA,sBAwDcH,KAxDd,EAwDqB;AACb,WAAKG,MAAL,GAAcH,KAAd;AACH;AA1DL;;AAAA;AAAA","sourcesContent":["import axios from 'axios';\nconst GET = 'GET'\nconst POST = 'POST'\nconst PUT = 'PUT'\nconst DELETE = 'DELETE'\n\nexport class Api {\n\n    async _login({ email, password }) {\n        console.log(email, password)\n        let form = new FormData();\n        form.append(\"email\", email);\n        form.append(\"password\", password);\n\n        return axios.post('http://localhost:3001/users/login', {\n            email: `${email}`,\n            password: `${password}`\n          })\n          .then((response) => {\n            if(response.data.message === false) {\n              return {\n                message : 'user not found'\n              }\n            } else {\n              return {\n                email\n              }\n            }\n          })\n          .catch((error) => {\n            return error\n          });\n    }\n\n    async _signup({ email, password, selectedRole }) {\n        let form = new FormData();\n        form.append(\"email\", email);\n        form.append(\"password\", password);\n        form.append(\"selectedRole\", selectedRole.value);\n\n\n        return  axios.post('http://localhost:3001/users/signup', {\n            email: `${email}`,\n            password: `${password}`,\n            userRole: `${selectedRole}`\n          })\n          .then((response) => {\n            if(response.data.message === false) {\n              alert('This User is alraedy registered, try with some other email.')\n            } else {\n              alert('Welcome, You have been logged in')\n            }\n          })\n          .catch((error) => {\n            alert(error)\n          });\n    }\n\n    get token() {\n        return this._token\n    }\n\n    set token(value) {\n        this._token = value\n    }\n}\n"]},"metadata":{},"sourceType":"module"}